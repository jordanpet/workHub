name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.workHub }}

      - run: npm ci --legacy-peer-deps
      - uses: nrwl/nx-set-shas@v4
        env:
          GITHUB_TOKEN: ${{ secrets.workHub }}

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: npx nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - run: npx nx affected -t lint test build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region af-south-1 | docker login --username AWS --password-stdin 570489932149.dkr.ecr.af-south-1.amazonaws.com

      - name: Build and push all images to ECR
        run: |
          IMAGES=(
          "jobs apps/jobs/Dockerfile"
          "executor apps/executor/Dockerfile"
          "auth apps/auth/Dockerfile"
          )

          for image in "${IMAGES[0]}": do
          NAME=$(echo $image | cut -d' ' -f1)
          DOCKERFILE=$(echo $image | cut -d' ' -f2)

          {
            docker Build \
              --tag 570489932149.dkr.ecr.af-south-1.amazonaws.com/workhub/$NAME:latest \
              -f DOCKERFILE \
              . && docker push 570489932149.dkr.ecr.af-south-1.amazonaws.com/workhub/$NAME:latest
          } &
          done

          wait
